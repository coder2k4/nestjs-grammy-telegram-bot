import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Bot, Context, InlineKeyboard, InputFile, Keyboard } from 'grammy';

@Injectable()
export class TelegrambotServiceGroup implements OnModuleInit {
  private bot: Bot<Context>;
  private channelId;
  userStates = new Map<number, string>();
  activeChats = new Map<number, string>(); // –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ ID –∫–∞–Ω–∞–ª–∞
  // –î–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  coefficients = {
    type: {
      self_assembled: {
        name: '—Å–∞–º–æ—Å–±–æ—Ä–Ω—ã–π',
        efficiency: 1.3,
        picture: undefined,
      },
      four_valve: {
        name: '—á–µ—Ç—ã—Ä–µ—Ö–∫–ª–∞–ø–∞–Ω–Ω—ã–π',
        efficiency: 1.1,
        picture: undefined,
      },
    },
    color: {
      white: {
        name: '–±–µ–ª–∞—è',
        efficiency: 1.2,
        picture: undefined,
      },
      gray: {
        name: '—Å–µ—Ä–∞—è',
        efficiency: 1.0,
        picture: undefined,
      },
    },
    cardboard: {
      –¢22: {
        name: '–¢22',
        efficiency: 31.5,
        picture: undefined,
      },
      –¢23: {
        name: '–¢23',
        efficiency: 34.86,
        picture: undefined,
      },
    },
  };

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userData = {};

  mainKeyboard = new Keyboard()
    .text('/start')
    .text('/contacts')
    .row() // –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    .text('/calculator')
    .text('/call')
    .row()
    .text('/online_consultation')
    .resized();

  constructor(private configService: ConfigService) {
    this.channelId = this.configService.get<string>('TELEGRAM_GROUP_ID');

    const token = this.configService.get<string>('TELEGRAM_BOT_KEY');
    this.bot = new Bot<Context>(token);

    this.bot.api.setMyCommands([
      { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞' },
      { command: 'online_consultation', description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω' },
      { command: 'calculator', description: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' },
      { command: 'call', description: '–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫' },
    ]);
  }

  onModuleInit() {
    this.bot.command('start', async (ctx) => {
      const introductionText = `–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ *–ì–æ—Ñ—Ä–æ—É–ø–∞–∫–æ–≤–∫–∞*\\.\n –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–¥–∞–∂–µ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ –∏–∑ –≥–æ—Ñ—Ä–æ–∫–∞—Ä—Ç–æ–Ω–∞\\.\n\n –ù–∞—à —Å–∞–π—Ç: https://gofro\\-upak\\.ru/ \n\n –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:\n \\/start \\- \\(–ø–µ—Ä–µ\\)–ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞\n \\/contacts \\- –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞\n \\/online\\_consultation \\- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω\n \\/calculator \\- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\ \\/call \\- –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n`;

      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await ctx.replyWithPhoto(new InputFile('src/shared/images/logo-new.png'));

      await ctx.reply(introductionText, {
        parse_mode: 'MarkdownV2',
        reply_markup: this.mainKeyboard,
      });
    });

    this.bot.command('contacts', async (ctx) => {
      await ctx.reply(
        '*–ì–æ—Ñ—Ä–æ—É–ø–∞–∫–æ–≤–∫–∞*\n' +
          '_–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥\\. –û–±–Ω–∏–Ω—Å–∫, —É–ª\\. –ö—Ä–∞—Å–Ω—ã—Ö –ó–æ—Ä—å 34/1_\n\n' +
          '*–¢–µ–ª–µ—Ñ–æ–Ω*\n' +
          '`+7\\(902\\) 986\\-46\\-16`\n\n' +
          '*–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã*\n' +
          '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\\-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 09:00 –¥–æ 21:00\n' +
          '–û—Ñ–∏—Å: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\\-–ø—è—Ç–Ω–∏—Ü–∞ —Å 09:00 –¥–æ 18:00\n',
        {
          parse_mode: 'MarkdownV2',
        },
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
      await ctx.replyWithLocation(55.108014, 36.623982); // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    });

    this.bot.command('call', async (ctx) => {
      const keyboard = new Keyboard()
        .requestContact('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã')
        .resized()
        .oneTime();

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', {
        reply_markup: keyboard,
      });
    });

    this.bot.callbackQuery('yes_send_to_manager', async (ctx) => {
      const userId = ctx.from.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!this.userData[userId]) {
        await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessionData = this.userData[userId];
      const volume = this.calculateVolume(sessionData);

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
      const userFullName =
        ctx.from.first_name + ' ' + (ctx.from.last_name || '');
      const userContact = ctx.from.username
        ? `@${ctx.from.username}`
        : '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      const messageToManager = `
    üöÄ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

    üë§ –ò–º—è: ${userFullName}
    üìá –ö–æ–Ω—Ç–∞–∫—Ç: ${userContact}

    üè∑ –¢–∏–ø –∏–∑–¥–µ–ª–∏—è: ${this.coefficients.type[sessionData.type].name}
    üè∑ –¶–≤–µ—Ç –±—É–º–∞–≥–∏: ${this.coefficients.color[sessionData.color].name}
    üè∑ –¢–∏–ø –∫–∞—Ä—Ç–æ–Ω–∞: ${this.coefficients.cardboard[sessionData.cardboard].name}
    
    üìè –í—ã—Å–æ—Ç–∞: ${sessionData.height} –º–º
    üìè –®–∏—Ä–∏–Ω–∞: ${sessionData.width} –º–º
    üìè –î–ª–∏–Ω–∞: ${sessionData.length} –º–º

    üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${volume.toFixed(2)} —Ä—É–±–ª–µ–π.
  `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–∑–∞–º–µ–Ω–∏—Ç–µ this.ownerId –Ω–∞ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
      await this.bot.api.sendMessage(this.channelId, messageToManager);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
      await ctx.reply(
        '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É –Ω–∞–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /call (–∏–ª–∏ –≤—ã–±—Ä–∞–≤ –∏–∑ –º–µ–Ω—é) - –∏–Ω–∞—á–µ —É –Ω–∞—Å –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏.',
      );
    });

    //–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    {
      this.bot.command('calculator', async (ctx) => {
        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è:',
          this.createInlineKeyboardFromCoefficients('type'),
        );
      });

      this.bot.callbackQuery(/type_(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        const selectedType = ctx.match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        //ctx.session = { type: selectedType }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–µ—Å—Å–∏–∏

        const userId = ctx.from.id;
        this.userData[userId] = { type: selectedType }; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        const typeData = this.coefficients.type[selectedType];

        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${typeData.name}`);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if (typeData.picture) {
          await ctx.replyWithPhoto(typeData.picture);
        }

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –±—É–º–∞–≥–∏
        await ctx.reply(
          '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –±—É–º–∞–≥–∏:',
          this.createInlineKeyboardFromCoefficients('color'),
        );
      });

      this.bot.callbackQuery(/color_(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        const selectedPaper = ctx.match[1];
        const userId = ctx.from.id;
        this.userData[userId].color = selectedPaper;

        const paperData = this.coefficients.color[selectedPaper];

        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç –±—É–º–∞–≥–∏: ${paperData.name}`);

        if (paperData.picture) {
          await ctx.replyWithPhoto(paperData.picture);
        }

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç–æ–Ω–∞
        await ctx.reply(
          '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç–æ–Ω–∞:',
          this.createInlineKeyboardFromCoefficients('cardboard'),
        );
      });

      this.bot.callbackQuery(/cardboard_(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        const selectedCardboard = ctx.match[1];
        const userId = ctx.from.id;
        this.userData[userId].cardboard = selectedCardboard;

        const cardboardData = this.coefficients.cardboard[selectedCardboard];
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∫–∞—Ä—Ç–æ–Ω–∞: ${cardboardData.name}`);

        if (cardboardData.picture) {
          await ctx.replyWithPhoto(cardboardData.picture);
        }

        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—ã—Å–æ—Ç—ã, —à–∏—Ä–∏–Ω—ã –∏ –¥–ª–∏–Ω—ã
        if (this.userData[userId].type === 'self_assembled') {
          await ctx.replyWithPhoto(
            new InputFile(
              'src/shared/images/self_assebled_cardboard/korob-samosborniy-height-300x300.jpg',
            ),
          );
        } else {
          await ctx.replyWithPhoto(
            new InputFile('src/shared/images/height.jpg'),
          );
        }
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–æ—Ä–æ–±–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö(–º–º):',
        );
        this.userStates.set(userId, 'awaiting_height');
      });
    }
    // –ù–∞—á–∞–ª–æ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    this.bot.command('online_consultation', async (ctx) => {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
      await this.bot.api.sendMessage(
        this.channelId,
        `–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.first_name} (${ctx.from.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.`,
      );

      // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.reply('–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
      this.activeChats.set(ctx.from.id, this.channelId);
    });

    this.bot.command('debug_get_id', async (ctx) => {
      const chatId = ctx.chat.id;
      console.log(
        'üöÄ ~ TelegrambotServiceGroup ~ this.bot.command ~ chatId:',
        chatId,
      );
      const chatType = ctx.chat.type;
      const message = `ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: ${chatId}\n–¢–∏–ø —á–∞—Ç–∞: ${chatType}`;

      await ctx.reply(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    this.bot.on(':contact', async (ctx) => {
      const contact = ctx.message.contact;
      const message = ` –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: ${contact.first_name} ${contact.last_name || ''}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${contact.phone_number}
    `;

      await this.bot.api.sendMessage(this.channelId, message);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∫–∞–∫ "–∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞"
      await this.bot.api.sendContact(
        this.channelId,
        contact.phone_number,
        contact.first_name,
        {
          last_name: contact.last_name || '', // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
          vcard: `
                BEGIN:VCARD
                VERSION:3.0
                N:${contact.last_name || ''};${contact.first_name};;;
                FN:${contact.first_name} ${contact.last_name || ''}
                TEL;TYPE=CELL:${contact.phone_number}
                END:VCARD
              `,
        },
      );

      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å–∫–æ—Ä–æ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!',
        {
          reply_markup: this.mainKeyboard,
        },
      );

      const keyboard = new InlineKeyboard()
        .text('–î–∞', 'yes-send-message-to-operator')
        .text('–ù–µ—Ç', 'not-send-message-to-operator');

      await ctx.reply('–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?', {
        reply_markup: keyboard,
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    this.bot.callbackQuery('yes-send-message-to-operator', async (ctx) => {
      await ctx.answerCallbackQuery();
      await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.userStates.set(ctx.from.id, 'awaiting_message');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
    this.bot.callbackQuery('not-send-message-to-operator', async (ctx) => {
      await ctx.answerCallbackQuery(); // –ó–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
      await ctx.reply('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.on('message:text', async (ctx) => {
      const operatorChannelId = this.activeChats.get(ctx.from.id);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      if (operatorChannelId) {
        await this.bot.api.sendMessage(
          operatorChannelId,
          `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.first_name} (${ctx.from.id}): ${ctx.message.text}`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞)
      if (
        ctx.chat.id.toString() === this.channelId &&
        ctx.message.reply_to_message
      ) {
        const userIdMatch =
          ctx.message.reply_to_message.text.match(/\((\d+)\)/);
        if (userIdMatch) {
          const userId = parseInt(userIdMatch[1], 10);
          await this.bot.api.sendMessage(
            userId,
            `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${ctx.message.text}`,
          );
        }
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const state = this.userStates.get(ctx.from.id);
      if (state === 'awaiting_message') {
        const userMessage = ctx.message.text;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await this.bot.api.sendMessage(
          this.channelId,
          `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n${userMessage}`,
        );
        await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, —Å–ø–∞—Å–∏–±–æ!');

        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        this.userStates.delete(ctx.from.id);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—ã—Å–æ—Ç—ã
      if (state === 'awaiting_height') {
        const height = parseFloat(ctx.message.text);
        if (isNaN(height)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—Å–æ—Ç—ã.');
        } else {
          this.userData[ctx.from.id].height = height;
          // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—ã—Å–æ—Ç—ã, —à–∏—Ä–∏–Ω—ã –∏ –¥–ª–∏–Ω—ã
          if (this.userData[ctx.from.id].type === 'self_assembled') {
            await ctx.replyWithPhoto(
              new InputFile(
                'src/shared/images/self_assebled_cardboard/korob-samosborniy-width-300x300.jpg',
              ),
            );
          } else {
            await ctx.replyWithPhoto(
              new InputFile('src/shared/images/length.jpg'),
            );
          }
          await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö(–º–º):');
          this.userStates.set(ctx.from.id, 'awaiting_width');
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã
      else if (state === 'awaiting_width') {
        const width = parseFloat(ctx.message.text);
        if (isNaN(width)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —à–∏—Ä–∏–Ω—ã.');
        } else {
          this.userData[ctx.from.id].width = width;
          if (this.userData[ctx.from.id].type === 'self_assembled') {
            await ctx.replyWithPhoto(
              new InputFile(
                'src/shared/images/self_assebled_cardboard/korob-samosborniy-length-300x300.jpg',
              ),
            );
          } else {
            await ctx.replyWithPhoto(
              new InputFile('src/shared/images/width.jpg'),
            );
          }
          await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∫–æ—Ä–æ–±–∫–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö(–º–º):');
          this.userStates.set(ctx.from.id, 'awaiting_length');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã
      else if (state === 'awaiting_length') {
        const length = parseFloat(ctx.message.text);
        if (isNaN(length)) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏–Ω—ã.');
        } else {
          this.userData[ctx.from.id].length = length;
          this.userStates.delete(ctx.from.id); // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å

          // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const cost = this.calculateVolume(this.userData[ctx.from.id]);

          this.userData[ctx.from.id].cost = cost;

          const inlineKeyboard = new InlineKeyboard().text(
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
            'yes_send_to_manager',
          );

          await ctx.reply(
            `–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç  = ${cost.toFixed(2)} —Ä—É–±–ª–µ–π.`,
            {
              reply_markup: inlineKeyboard,
            },
          );
        }
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    this.bot.start();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
  createInlineKeyboardFromCoefficients(type: string) {
    const options = this.coefficients[type];
    const buttons = [];

    for (const key in options) {
      if (options.hasOwnProperty(key)) {
        buttons.push([
          { text: options[key].name, callback_data: `${type}_${key}` },
        ]);
      }
    }

    return {
      reply_markup: {
        inline_keyboard: buttons,
      },
    };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞
  calculateVolume(sessionData: any) {
    const typeK = this.coefficients.type[sessionData.type].efficiency;
    const paperK = this.coefficients.color[sessionData.color].efficiency;
    const cardboardK =
      this.coefficients.cardboard[sessionData.cardboard].efficiency;

    const height = sessionData.height;
    const width = sessionData.width;
    const length = sessionData.length;

    const area = (((length + width) * 2 + 60) * (height * 2 + 6)) / 1000000; // –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 1000000 –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–ª–æ—â–∞–¥—å –∏–∑ –∫–≤. –º–º –≤ –∫–≤. –º–µ—Ç—Ä—ã

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    const cost = area * typeK * paperK * cardboardK;

    return cost;
  }
}
